Work on algorithm for special event schedule
Priority Queue: Assigning to stations
	1: All major stations, including parachute (if present)
	3: Backup at stations
	4: Face painting: clause - moved to priority 2 if facepainting has happened, try to guarantee 2-3 in a row
				   and multiple volunteers here, close if not
	5: Minimum priority: Break, but special case where it is handled at the end
	
Map<Integer, String> stations
	Maps each station to an id, break is always last
	
Volunteer object, 
 fields: bool isTeen, bool takenBreak, int[] schedule, string lastStation, int lowPriorityShifts

Station object, 
 fields: int priority, str name, int(?) time
 methods: changePriority(int priority), comparable

Custom VolunteerPriorityQueue object? Or just other methods for the overall class:
	Facepainting mode: Check all lastStations after every round, shifts priority if any volunteer has 
	lastStation facepainting.
		Maybe make the field lastTwoStations and remove all facepainting at end if can't be done
		two times in a row?
		Maybe make this modular also: Can guarantee 2 at facepainting, or just 1
	Break mode: After done, iterate through volunteers and see which ones don't have break, replace one
	of their low priority jobs with break here
	
	High priority jobs assigned first: a volunteer who has been assigned high priority job is moved lower
	on the priority list to ensure everyone has some low priority jobs if possible